import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_sound/flutter_sound_player.dart';
import 'package:player/bloc/bloc.dart';
import 'package:player/bloc/event.dart';

/// This example emulates the basic Counter app generated by the
/// `flutter create` command to demonstrates the `useState` hook.
///
/// First, instead of a StatefulWidget, use a HookWidget instead!
class SliderBar extends HookWidget {
  @override
  Widget build(BuildContext context) {
    // Next, invoke the `useState` function with a default value to create a
    // `counter` variable that contains a `value`. Whenever the value is
    // changed, this Widget will be rebuilt!
    final position = useState(0.0);

    final playerBloc = BlocProvider.of<PlayerBloc>(context);
    return StreamBuilder<PlayStatus>(
      stream: playerBloc.getStateStream,
      builder: (context, snapshot) {
        if (snapshot.hasError) return Text('Error: ${snapshot.error}');

        if (snapshot.connectionState == ConnectionState.active ||
            snapshot.connectionState == ConnectionState.done) {
          var playStatus = snapshot.data;
          double duration = playStatus.duration;

          return Container(
            padding: EdgeInsets.all(10),
            height: 50.0,
            width: 400,
            child: Slider(
              value: position.value == 0.0
                  ? min(playStatus.currentPosition, duration)
                  : position.value,
              min: 0.0,
              max: duration,
              onChanged: (value) {
                position.value = value;
              },
              onChangeStart: (value) {
                position.value = value;
              },
              onChangeEnd: (value) async {
                position.value = 0.0;
                playerBloc.add(SeekTo(value.toInt()));
              },
              divisions: duration == 0.0 ? 1 : duration.toInt(),
            ),
          );
        }

        return Text('loading...    ');
      },
    );
  }
}
